---
import Card from "@/components/Card.astro";
import { getGitHubStarCount } from "@/utils/github";
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";

import noImage from "@/assets/images/no-image.webp";

import CalendarIcon from "~icons/heroicons/calendar-solid";
import GitHubIcon from "~icons/octicon/mark-github-24";
import StarIcon from "~icons/heroicons/star-solid";
import CommandlineIcon from "~icons/heroicons/command-line-solid";
import DesktopIcon from "~icons/heroicons/computer-desktop-solid";
import PhoneIcon from "~icons/heroicons/device-phone-mobile-solid";
import PuzzleIcon from "~icons/heroicons/puzzle-piece-solid";
import LibraryIcon from "~icons/fluent/library-32-filled";
import ScriptIcon from "~icons/proicons/script";
import WindowIcon from "~icons/heroicons/window-solid";
import ExternalLinkIcon from "~icons/heroicons/arrow-top-right-on-square-solid";

import { Picture } from "astro:assets";
import Paragraph from "@/components/Paragraph.astro";
import ButtonLink from "@/components/ButtonLink.astro";
import Badge from "@/components/Badge.astro";

interface Props {
  entry: CollectionEntry<"works">;
}

const icons = {
  commandline: CommandlineIcon,
  desktop: DesktopIcon,
  library: LibraryIcon,
  phone: PhoneIcon,
  puzzle: PuzzleIcon,
  script: ScriptIcon,
  window: WindowIcon,
} as const satisfies Record<
  CollectionEntry<"works">["data"]["icon"],
  astroHTML.JSX.Element
>;

const { entry } = Astro.props;
const { data } = entry;

let starCount = 0;

if (data.github) {
  starCount = await getGitHubStarCount(data.github);
}

const Icon = icons[data.icon];
const { Content } = await render(entry);
---

<Card as="section" class="work-card" noPadding>
  <div class="cover">
    <Picture
      src={data.cover || noImage}
      formats={["avif", "webp"]}
      alt={data.title}
    />
  </div>
  <Icon class="icon" />
  <h3>{data.title}</h3>
  <CalendarIcon class="detail-icon date-icon" />
  <time class="detail-text date">{data.date}</time>
  {
    data.github && (
      <>
        <GitHubIcon class="detail-icon github-repo-icon" />
        <a
          href={`https://github.com/${data.github}`}
          target="_blank"
          class="detail-text github-repo"
        >
          {data.github}
        </a>
      </>
    )
  }
  {
    starCount > 0 && (
      <>
        <StarIcon class="detail-icon github-star-icon" />
        <p class="detail-text github-star-count">{starCount} stars</p>
      </>
    )
  }
  <main class="content">
    <Content
      components={{
        p: Paragraph,
      }}
    />
  </main>
  <div class="keywords">
    {data.keywords?.map((keyword) => <Badge>{keyword}</Badge>)}
  </div>
  <footer>
    {
      data.link.map((link) => (
        <ButtonLink href={link.url} target="_blank" rel="noopener noreferrer">
          {link.label}
          <ExternalLinkIcon />
        </ButtonLink>
      ))
    }
  </footer>
</Card>

<style lang="scss">
  @use "@/assets/styles/variables" as var;

  .work-card {
    height: 100%;
    display: grid;
    grid-template:
      "cover cover cover cover" auto
      "_l _gutter_1 _gutter_1 _r" 0.75rem
      "_l title-icon title _r" auto
      "_l date-icon date _r" auto
      "_l github-repo-icon github-repo _r" auto
      "_l github-star-icon github-star-count _r" auto
      "_l content content _r" auto
      " _l keywords keywords _r" 1fr
      "_l _gutter_2 _gutter_2 _r" 0.25rem
      "_l footer footer _r" auto / 1rem auto 1fr 1rem;
    gap: 0.375rem 0.5rem;
    padding-bottom: 1.25rem;

    .cover {
      display: block;
      grid-area: cover;
      border-bottom: 1px solid var.$color-border;

      img {
        display: block;
        width: 100%;
        height: auto;
        aspect-ratio: 3 / 2;
      }
    }

    .icon {
      grid-area: title-icon;
      width: 1.5rem;
      height: 1.5rem;
      color: var.$color-text-primary;
      placce-self: center;
      transform: translateY(0.075rem);
    }

    .keywords {
      grid-area: keywords;
      display: flex;
      flex-flow: row wrap;
      gap: 0.5rem 0.25rem;
      align-content: flex-start;
      align-items: center;
      justify-content: flex-start;
    }

    h3 {
      grid-area: title;
      font-size: 1.25rem;
      color: var.$color-text-primary;
    }

    .date-icon {
      grid-area: date-icon;
    }

    .date {
      grid-area: date;
      display: block;
    }

    .detail-icon {
      width: 1rem;
      height: 1rem;
      color: var.$color-text-secondary;
      place-self: center;
    }

    .detail-text {
      font-size: 0.875rem;
      color: var.$color-text-secondary;
    }

    .github-repo-icon {
      grid-area: github-repo-icon;
    }

    .github-repo {
      grid-area: github-repo;
      color: var.$color-text-link-secondary;
      transition: color 0.2s ease;

      &:hover {
        color: var.$color-text-link-secondary-hover;
      }
    }

    .github-star-icon {
      grid-area: github-star-icon;
    }

    .github-star-count {
      grid-area: github-star-count;
    }

    .content {
      grid-area: content;
    }

    footer {
      grid-area: footer;
      display: flex;
      flex-flow: row wrap;
      justify-content: center;
      gap: 0.5rem;
    }
  }
</style>
